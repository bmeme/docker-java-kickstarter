#!/usr/bin/env bash

set -e
if [[ "$OSTYPE" == "darwin"* ]]; then
    READLINK=$(which greadlink)
else
    READLINK=$(which readlink)
fi

THIS_SCRIPT_DIR=$(dirname -- "$(${READLINK} -f -- "${BASH_SOURCE[0]}")")
source "${THIS_SCRIPT_DIR}/common/lib.sh"

mkdir -p "${LOGDIR}"

if ! test -f "${BASE_PRJ_DIR}/.env"; then
    echo
    echo -e "It looks like it's the ${CG}first time${CN} you run the ${CB}configure${CN} script."
    echo -e "You need to set up environment ${CY}variables${CN} to continue."
    echo 
    echo -e "Please specify the ${CG}vendor${CN} for your new project."
    echo "Typically this is your organization name, or the organization the projects belongs to."
    echo -n -e "${CY}Vendor:${CN} "
    read VENDOR

    echo ""
    echo -e "Please specify the ${CG}name${CN} for your new project."
    echo -n -e "${CY}Project name:${CN} "
    read PROJECT

    echo ""
    echo -e "Configuring ${CG}env${CN} file..."
    sed "s/@@@PROJECT@@@/${PROJECT}/g;s/@@@VENDOR@@@/${VENDOR}/g" "${BASE_PRJ_DIR}/.env.dist" > "${BASE_PRJ_DIR}/.env"
    rm -f "${BASE_PRJ_DIR}/.env.dist"

    source "${BASE_PRJ_DIR}/.env"
fi

if ! test -f "${BASE_PRJ_DIR}/.env"; then
    exit 1
fi

command_help() {

    echo ""
    echo "=============================================================================================="
    echo -e " ${CB}${TB}${COMPOSE_PROJECT_NAME}${CN} - ${CB}Help${CN} "
    echo "=============================================================================================="
    echo ""
    echo -en "${CY}"
    printf "%-25s" " help"
    echo -e "${CN} -- Show help on how to use this script"
    for i in $(ls "${BASE_PRJ_DIR}/.bmeme/build/commands"); do
        if [[ -d "${BASE_PRJ_DIR}/.bmeme/build/commands/$i" ]]; then
            for l in $(ls "${BASE_PRJ_DIR}/.bmeme/build/commands/$i"); do
                CMD_DESCR=$("${BASE_PRJ_DIR}/.bmeme/build/commands/$i/$l" descr)
                echo -en "${CY}"
                printf "%-25s" " ${i}:${l%.*}"
                echo -e "${CN} -- ${CMD_DESCR}"
            done
            continue
        fi
        CMD_DESCR=$("${BASE_PRJ_DIR}/.bmeme/build/commands/$i" descr)
        echo -en "${CY}"
        printf "%-25s" " ${i%.*}"
        echo -e "${CN} -- ${CMD_DESCR}"
    done
    echo -en "${CY}"

    echo ""
    echo ""
    echo -e "${CR}${TB}DNS aliases${CN}"
    echo ""
    echo -e "These aliases work if you have ${CY}dinghy-http-proxy${CN} on MacOs or ${CY}dnsdock${CN} on Linux configured."
    echo ""
    echo -e " - ${CG}http://app.${PROJECT_NAME}.${PROJECT_VENDOR}.docker${CN} (MacOs)"
    echo -e " - ${CG}http://app.${PROJECT_NAME}.${PROJECT_VENDOR}.docker:${PROJECT_PORT}${CN} (Linux)"
    echo ""
    echo ""
    echo -e "${CR}${TB}Script log file${CN}"
    echo -e " - tail -f ${CG}${LOGFILE}${CN}"
    echo ""
}

log_begin

if [ $# -eq 0 ]; then
    command_help
    log_end
    exit 0
fi

for cmdLineArg in "$@"; do

    if [[ "$cmdLineArg" == "help" ]]; then
        command_help
    elif [[ "$cmdLineArg" =~ .*":".* ]] && [[ -f "${BASE_PRJ_DIR}/.bmeme/build/commands/${cmdLineArg%:*}/${cmdLineArg#*:}.sh" ]]; then
        bash -c "${BASE_PRJ_DIR}/.bmeme/build/commands/${cmdLineArg%:*}/${cmdLineArg#*:}.sh run"
    elif [[ -f "${BASE_PRJ_DIR}/.bmeme/build/commands/${cmdLineArg}.sh" ]]; then
        bash -c "${BASE_PRJ_DIR}/.bmeme/build/commands/${cmdLineArg}.sh run"
    else
        echo -e "Unrecognized command: ${CR}${cmdLineArg}${CN}"
        echo
        echo -e "Try: ${CY}${0} help${CN}"
        log_end
        exit 1
    fi

done

log_end
exit 0
